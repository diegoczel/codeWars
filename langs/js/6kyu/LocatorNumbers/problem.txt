Description of Locator Numbers
Locator numbers use the letters from the English alphabet (a-z, A-Z) 
to represent integers as sums of powers of 2, much like binary numbers already do.

a = 2^0, b = 2^1, c = 2^2, and so forth. 
Capital letters are used to represent powers of two beyond 2^25; Thus, A = 2^26, 
and so forth up to Z.

The string "linux", for example, represents the number 9,447,680;

  l = 2^11,
  i = 2^8
  n = 2^13
  u = 2^20
+ x = 2^23
-----------
  9447680
Negative numbers are also represented by simply appending the '-' 
character to the beginning of the locator number string.
Zero is represented by the empty string.

Specification
Your work will be to implement the two following functions:

toLocString(int) -> string: Should take any integer in the open interval (-2^52, 2^52) 
and produce the most simplified locator number string which can represent that number. 
This means the output string should be sorted from least significant digit to most 
significant digit, from left to right, with no repeating digits.
Thus, the value -4095 should produce the string "-abcdefghijkl".

toInt(string) -> int: Should take a locator number string, 
and return the matching integer value. The input may have repeating digits and be in any order;
It must still accept this string like normal and produce its value.

Both functions should be able to take eachother's output as input directly. 
String arguments to toInt() may have whitespace (\t, \v, \r, \n, and space) 
anywhere in the string and must be ignored. Do not check for range or errors, 
assume inputs will always be valid.